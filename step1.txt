English: Step 1 Filtering out sentences that cannot be converted into sentences with 'orphans' in any way

cat en-ud-dev.conllu | udapy -s util.Filter keep_tree_if_node="not node.parent.is_root() and all(desc.form not in {'nor', 'neither', 'either'} for desc in node.root.descendants) and len([c for c in node.parent.children if c.deprel not in {'cop', 'aux', 'discourse', 'parataxis'}]) >= 3 and any(c.deprel in {'nsubj'} for c in node.parent.children) and all(c.deprel not in {'ccomp', 'xcomp'} for c in node.parent.children) and (node.deprel == 'conj' and node.upos != 'AUX') and all(c.deprel not in {'acl', 'acl:relcl', 'xcomp', 'ccomp', 'advcl', 'expl'} for c in node.children) and any(c.deprel in {'nsubj'} and not any(d.deprel in {'acl', 'acl:relcl'} for d in c.descendants) for c in node.children) and all(not(c.form == 'it' and c.deprel == 'nsubj') for c in node.children) and not (node.upos == 'VERB' and node.parent.upos != 'VERB' and len([c for c in node.children if c.deprel not in {'aux', 'nsubj', 'cc', 'punct', 'obj', 'discourse', 'parataxis'} and c.form not in {'nt', 'not'}]) < 2) and node.parent.deprel not in {'acl', 'acl:relcl', 'xcomp', 'ccomp', 'advcl', 'expl'} and '?' not in root.text.split()[-1] and root.text.split()[0].lower() not in {'why', 'what'} and (c.form != 'so' for c in node.children)" mark="Mark" | udapy write.TextModeTrees

# if there is no '# text' before tokens
cat en-ud-dev.conllu | udapy -s util.Filter keep_tree_if_node="not node.parent.is_root() and all(desc.form not in {'nor', 'neither', 'either'} for desc in node.root.descendants) and len([c for c in node.parent.children if c.deprel not in {'cop', 'aux', 'discourse', 'parataxis'}]) >= 3 and any(c.deprel in {'nsubj'} for c in node.parent.children) and all(c.deprel not in {'ccomp', 'xcomp'} for c in node.parent.children) and (node.deprel == 'conj' and node.upos != 'AUX') and all(c.deprel not in {'acl', 'acl:relcl', 'xcomp', 'ccomp', 'advcl', 'expl'} for c in node.children) and any(c.deprel in {'nsubj'} and not any(d.deprel in {'acl', 'acl:relcl'} for d in c.descendants) for c in node.children) and all(not(c.form == 'it' and c.deprel == 'nsubj') for c in node.children) and not (node.upos == 'VERB' and node.parent.upos != 'VERB' and len([c for c in node.children if c.deprel not in {'aux', 'nsubj', 'cc', 'punct', 'obj', 'discourse', 'parataxis'} and c.form not in {'nt', 'not'}]) < 2) and node.parent.deprel not in {'acl', 'acl:relcl', 'xcomp', 'ccomp', 'advcl', 'expl'} and '?' not in root.compute_text().split()[-1] and root.compute_text().split()[0].lower() not in {'why', 'what'} and (c.form != 'so' for c in node.children)" mark="Mark" | udapy write.TextModeTrees


